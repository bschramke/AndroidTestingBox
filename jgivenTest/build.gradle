apply plugin: 'com.android.test'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    buildToolsVersion '27.0.3'
    compileSdkVersion 27
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // Set the target app project. The module specified here should contain the production code
    // test should run against.
    targetProjectPath ':app'
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27

        // The package name of the test app
        testApplicationId 'com.github.bschramke.android.testing.jgiven'
        // The Instrumentation test runner used to run tests.
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    sourceSets {
        //ensure that each java sourceSet also contains the kotlin folder
        all { sourceSet ->
            sourceSet.java.srcDir("src/${sourceSet.name}/kotlin")
        }
    }

}

configurations {
    jgivenReport
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'com.android.support:appcompat-v7:27.1.1'

    // Android Testing Support Library's runner and rules and hamcrest matchers
    implementation 'com.android.support.test:runner:1.0.2'
    implementation 'com.android.support.test:rules:1.0.2'
    implementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'org.hamcrest:hamcrest-core:1.3'
    implementation 'org.assertj:assertj-core:3.10.0'
    implementation 'com.squareup.assertj:assertj-android:1.2.0'

    implementation 'com.tngtech.jgiven:jgiven-android:0.16.0'

    jgivenReport 'com.tngtech.jgiven:jgiven-html5-report:0.16.0'
    jgivenReport 'org.slf4j:slf4j-simple:1.7.25'
}

def targetDir = 'build/reports/jgiven/json'
def adb = android.getAdbExecutable().toString()
def reportsDir = '/storage/emulated/0/Download/jgiven-reports'

task cleanJGivenReports(type: Delete) {
    delete targetDir
}

task pullJGivenReports(type: Exec, dependsOn: cleanJGivenReports) {
    doFirst {
        if (!file(targetDir).mkdirs()) {
            println("Cannot create dir "+targetDir)
        }
    }

    commandLine adb, 'pull', reportsDir, targetDir

    doLast {
        println("Pulled "+reportsDir+" to "+targetDir);
    }
}

task cleanJGivenReportsFromDevice(type: Exec) {
    commandLine adb, 'shell', 'rm -rf', reportsDir

    doLast {
        println("Deleted "+reportsDir)
    }
}

pullJGivenReports.finalizedBy(cleanJGivenReportsFromDevice)

task cleanJGivenHtmlReport(type: Delete) {
    delete 'build/reports/jgiven/html'
}

task jgivenHtml5Report(type: JavaExec, dependsOn: cleanJGivenHtmlReport) {
    main = 'com.tngtech.jgiven.report.ReportGenerator'
    args '--sourceDir=build/reports/jgiven/json',
            '--targetDir=build/reports/jgiven/html',
            '--format=html5',
            '--exclude-empty-scenarios=true'
    classpath = configurations.jgivenReport
}

pullJGivenReports.finalizedBy(jgivenHtml5Report)

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedAndroidTest') {
        task.finalizedBy 'pullJGivenReports'
    }
}